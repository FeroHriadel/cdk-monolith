services:
  dev-app:
    image: mcr.microsoft.com/dotnet/sdk:8.0
    working_dir: /app/api
    volumes:
      - ..:/app
    ports:
      - "5000:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:5000
      # Force override the default ports
      - ASPNETCORE_HTTP_PORTS=5000
      - ASPNETCORE_HTTPS_PORTS=
      # Disable HTTPS for Docker development
      - ASPNETCORE_HTTPS_PORT=
      # Override RabbitMQ host to use Docker container name
      - RabbitMQ__Host=rabbitmq
      # Override database connection to use Docker container name
      - ConnectionStrings__DefaultConnection=Server=mysql-db;Port=3306;Database=mydatabase;User=myuser;Password=mypassword;
    command: >
      bash -c "
        echo 'Installing Node.js 22...' &&
        curl -fsSL https://deb.nodesource.com/setup_22.x | bash - &&
        apt-get update && apt-get install -y nodejs &&
        
        echo 'Cleaning npm cache and directories...' &&
        npm cache clean --force &&
        rm -rf /usr/lib/node_modules/@angular* &&
        rm -rf /root/.npm &&
        
        echo 'Building Angular UI...' &&
        cd /app/client &&
        npm install &&
        echo 'Installing Angular CLI globally...' &&
        npm install -g @angular/cli --force &&
        npm run build-to-backend &&
        
        echo 'Starting .NET API...' &&
        cd /app/api &&
        dotnet restore &&
        
        echo 'Installing Entity Framework tools...' &&
        dotnet tool install --global dotnet-ef --version 8.0.4 &&
        export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/share/dotnet:/root/.dotnet/tools &&
        
        echo 'Verifying dotnet and EF tools...' &&
        which dotnet &&
        which dotnet-ef &&
        dotnet --version &&
        
        echo 'Initializing database...' &&
        dotnet ef database update &&
        
        echo 'Running on http://0.0.0.0:5000' &&
        dotnet run --urls=http://0.0.0.0:5000
      "
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

# Usage: From the /api folder, run:
# $ docker-compose -f app.yaml up -dcls